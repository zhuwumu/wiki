import{_ as i}from"./chunks/1699669677755.B4FROfId.js";import{_ as a,c as n,a0 as e,o as l}from"./chunks/framework.DNN_1AUP.js";const t="/wiki/images/Java/1699671228517.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01.后端技术栈/Java.md","filePath":"01.后端技术栈/Java.md"}'),p={name:"01.后端技术栈/Java.md"};function h(k,s,r,o,d,c){return l(),n("div",null,s[0]||(s[0]=[e(`<h2 id="线程池" tabindex="-1">线程池 <a class="header-anchor" href="#线程池" aria-label="Permalink to &quot;线程池&quot;">​</a></h2><h3 id="设置线程池参数" tabindex="-1">设置线程池参数 <a class="header-anchor" href="#设置线程池参数" aria-label="Permalink to &quot;设置线程池参数&quot;">​</a></h3><blockquote><p>线程池参数设置<a href="https://blog.51cto.com/u_16099170/6771992" target="_blank" rel="noreferrer">https://blog.51cto.com/u_16099170/6771992</a></p></blockquote><p><strong>具体是怎么设置呢？</strong></p><p>假设机器有N个CPU</p><p>1.那么对于计算密集型的任务，corePoolSize 应该设置线程数为N+1</p><p>2.对于IO密集型的任务，corePoolSize 应该设置线程数为2N</p><p>3.对于同时又计算工作和IO工作的任务，应该考虑使用两个线程池，一个处理计算任务，一个处理IO任务，分别对两个线程池按照计算密集型和IO密集型来设置线程数</p><blockquote><p>获取cpu代码</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">availableProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span></code></pre></div><h3 id="创建线程池" tabindex="-1">创建线程池 <a class="header-anchor" href="#创建线程池" aria-label="Permalink to &quot;创建线程池&quot;">​</a></h3><blockquote><p><a href="https://www.cnblogs.com/badaoliumangqizhi/p/17304186.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/badaoliumangqizhi/p/17304186.html</a></p></blockquote><p>ThreadPoolTaskExecutor （属于spring）和ThreadPoolExecutor（属于JDK）的区别：<a href="https://blog.csdn.net/qq_44754515/article/details/125805766" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_44754515/article/details/125805766</a></p><blockquote><p>Java线程池中三种方式创建 ThreadFactory 设置线程名称</p><p><a href="https://cloud.tencent.com/developer/article/1948703?areaSource=102001.16&amp;traceId=5aZi_fV1b9JskW2w7c9er" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1948703?areaSource=102001.16&amp;traceId=5aZi_fV1b9JskW2w7c9er</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/LiPengFeiii/p/15766351.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/LiPengFeiii/p/15766351.html</a></p></blockquote><p>使用common下创建ThreadFactory时，设置<code>daemon=true</code>变为守护线程，当主程序结束后，线程也会结束。如果要查看打印，需要给主线程加一下Thread.sleep(5000); // 主线程休眠5秒</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ThreadFactory basicThreadFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicThreadFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">namingPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example-schedule-pool-%d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daemon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>示例</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.cetc.gatekeeper.config;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.apache.commons.lang3.concurrent.BasicThreadFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @auther lanmei</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @date 2023/10/17</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** 线程池核心池的大小 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corePoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** 线程池中允许的最大线程数量 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximumPoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间 默认秒s*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** 队列 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> capacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadFactory threadFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicThreadFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">namingPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data-send-pool-%d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daemon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService executorService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            corePoolSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            maximumPoolSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            keepAliveTime,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            TimeUnit.SECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedBlockingQueue&lt;&gt;(capacity),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            threadFactory,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadPoolExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CallerRunsPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 获取线程池service</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getExecutorService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executorService;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="udp" tabindex="-1">UDP <a class="header-anchor" href="#udp" aria-label="Permalink to &quot;UDP&quot;">​</a></h2><blockquote><p>关于netty UDP不能发送大于2048字节包的问题<a href="https://blog.csdn.net/KokJuis/article/details/72864018" target="_blank" rel="noreferrer">https://blog.csdn.net/KokJuis/article/details/72864018</a></p></blockquote><ul><li><p>udp理论上支持最大发送64K的包，那为什么netty udp不能发送大于2048字节呢？实际上网络通信中，还受到很多其他因素的影响，netty udp并非不能发送大于2048字节的包。而是收到MTU的影响。MTU【最大传输单元（Maximum Transmission Unit，MTU）是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。最大传输单元这个参数通常与通信接口有关（网络接口卡、串口等）】。</p></li><li><p>MTU国际默认规定是1500，不同的网络接入方式，不同地区的网络运营商，甚至不同的路由器，它们的MTU值都可能是不同的，例如：ADSL接入时MTU为1492字节。操作系统中可以通过命令查看：netsh interface ipv4 show subinterfaces</p></li><li><p>最后说一下netty udp每次发送包大小的建议，因为国内很多用户的上网方式都是ADSL。而ADSL的MTU值1492。但每个UDP包都包含28字节的“数据包报头”，所以实际你每次只能发送的数据是1464个字节。</p></li></ul><h2 id="nio" tabindex="-1">NIO <a class="header-anchor" href="#nio" aria-label="Permalink to &quot;NIO&quot;">​</a></h2><h3 id="bytebuffer" tabindex="-1">ByteBuffer <a class="header-anchor" href="#bytebuffer" aria-label="Permalink to &quot;ByteBuffer&quot;">​</a></h3><p><img src="`+i+'" alt="1699669677755"></p><h3 id="channel" tabindex="-1">channel <a class="header-anchor" href="#channel" aria-label="Permalink to &quot;channel&quot;">​</a></h3><ul><li>FileChannel 的读和写都复制了2次</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><h3 id="selector" tabindex="-1">selector <a class="header-anchor" href="#selector" aria-label="Permalink to &quot;selector&quot;">​</a></h3><p><img src="'+t+'" alt="1699671228517"></p><p>为了实现Selector管理多个SocketChannel，必须将具体的SocketChannel对象注册到Selector，并声明需要监听的事件（这样Selector才知道需要记录什么数据），一共有4种事件：</p><ul><li>connetc：客户端连接服务器事件， 对应值为SelectionKey.OPCONNECT(8)</li><li>accept：服务端接收客户端连接事件，对应值为SelectionKey.OPACCEPT(16)</li><li>read：读事件 ，对应值为SelectionKey.OPREAD(1)</li><li>write：写事件，对应值为SelectionKey.OPWRITE(4)</li></ul><h2 id="netty" tabindex="-1">Netty <a class="header-anchor" href="#netty" aria-label="Permalink to &quot;Netty&quot;">​</a></h2><blockquote><p>参数调优</p></blockquote><p><a href="https://blog.csdn.net/weixin_44680802/article/details/128462846" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_44680802/article/details/128462846</a></p><p>针对ScoketChannel，7个，通过.childOption设置，常用的两个如下：</p><ul><li>SO_KEEPALIVE，tcp层keepalvie，默认关闭，一般选择关闭tcp keepalive 而使用应keepalive</li><li>TCP_NODELAY：设置是否启用nagle算法，该算法是tcp在发送数据时将小的、碎片化的数据拼接成一个大的报文一起发送，以此来提高效率，默认是false（启用），如果启用可能会导致有些数据有延时，如果业务不能忍受，小报文也需要立即发送则可以禁用该算法</li></ul><p>针对ServerScoketChannel，3个，通过.Option设置，常用的一个如下：</p><ul><li>.option(ChannelOption.SO_BACKLOG, 1024) // 等待最大连接数量</li><li>.childOption(ChannelOption.SO_KEEPALIVE, true) // 服务端开启tcp keepalive</li><li>.childOption(ChannelOption.TCP_NODELAY, true) // 关闭nagle算法，tcp发送小数据时，直接发送，不再拼装，减少延迟</li></ul><blockquote><p>出现io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1的原因及解决办法 <a href="http://www.manongjc.com/detail/21-cvkttljmlbmamsz.html" target="_blank" rel="noreferrer">http://www.manongjc.com/detail/21-cvkttljmlbmamsz.html</a></p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>从以上的分析文章中发现，SimpleChannelInboundHandler会自动释放内存（虽然这是一种软释放）即是refCnt引用数减一。</p><p>而本人在使用SimpleChannelInboundHandler作为Server端的时候，自己手动释放了一次msg的内存，导致refCnt引用数为0，这个时候框架试图去释放一</p><p>次，就报如上错误。释放代码如：</p><p>当然前提是你使用了SimpleChannelInboundHandler作为Handler处理事务，使用AbstractChannelInboundHandler是不会主动释放内容的，这个时候需要你自己手动释放一次。</p><blockquote><p>SimpleChannelInboundHandler和ChannelInboundHandlerAdapter区别<a href="https://www.pianshen.com/article/46501669845/" target="_blank" rel="noreferrer">https://www.pianshen.com/article/46501669845/</a></p></blockquote><ul><li>SimpleChannelInboundHandler继承ChannelInboundHandlerAdapter</li><li>SimpleChannelInboundHandler自动释放内存，ChannelInboundHandlerAdapter不自动释放</li><li>在Netty中客户端的Handler一般继承SimpleChannelInboundHandler抽象类，服务端Handler一般继承ChannelInboundHandlerAdapter抽象类</li><li>在客户端，当 channelRead0() 方法完成时，你已经有了传入消息，并且已经处理完它了。当该方法返回时，SimpleChannelInboundHandler负责释放指向保存该消息的ByteBuf的内存引用。</li><li>服务端：在EchoServerHandler中，你仍然需要将传入消息回送给发送者，而 write() 操作是异步的，直到 channelRead() 方法返回后可能仍然没有完成。为此，EchoServerHandler扩展了 ChannelInboundHandlerAdapter ，其在这个时间点上不会释放消息。</li></ul><blockquote><p>示例<a href="https://mp.weixin.qq.com/s/RPTETiULRAkOS-ZTd6xM2A" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/RPTETiULRAkOS-ZTd6xM2A</a></p></blockquote><h2 id="复制对象" tabindex="-1">复制对象 <a class="header-anchor" href="#复制对象" aria-label="Permalink to &quot;复制对象&quot;">​</a></h2><blockquote><p><a href="https://blog.csdn.net/JokerLJG/article/details/122876890?spm=1001.2014.3001.5506" target="_blank" rel="noreferrer">https://blog.csdn.net/JokerLJG/article/details/122876890?spm=1001.2014.3001.5506</a></p></blockquote><ul><li>直接赋值</li><li>浅拷贝 Spring BeanUtils(不要使用apache的)、 MapStruct ，不推荐使用json序列化的方式</li><li>深拷贝 get|set、clone</li></ul><h2 id="jackson" tabindex="-1">Jackson <a class="header-anchor" href="#jackson" aria-label="Permalink to &quot;Jackson&quot;">​</a></h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/646744855" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/646744855</a></p></blockquote>',52)]))}const u=a(p,[["render",h]]);export{y as __pageData,u as default};
