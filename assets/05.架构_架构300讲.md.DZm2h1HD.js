import{_ as l,c as e,o as a,ah as p,bS as r,bT as s,bU as o,bV as t,bW as n,bX as d,bY as c,bZ as h,b_ as _,b$ as m,c0 as g,c1 as b,c2 as u,c3 as k,c4 as f,c5 as x,c6 as D,c7 as I}from"./chunks/framework.Dgw6jcLr.js";const L=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"05.架构/架构300讲.md","filePath":"05.架构/架构300讲.md","lastUpdated":null}'),y={name:"05.架构/架构300讲.md"};function P(S,i,w,J,v,j){return a(),e("div",null,[...i[0]||(i[0]=[p('<h2 id="_101、-如何防止重复提交订单" tabindex="-1">101、 如何防⽌重复提交订单？ <a class="header-anchor" href="#_101、-如何防止重复提交订单" aria-label="Permalink to “101、 如何防⽌重复提交订单？”">​</a></h2><p>重复提交的原因：</p><ul><li>用户多次点击按钮</li><li>nginx或springCloud的gateway的网关层，进行超时重试造成的</li></ul><ol><li>按钮置灰</li><li>预生成全局唯一订单号（后端），利用数据的唯一索引特性，在插入数据库时，如果重复，则插入失败</li><li>前端生成唯一订单号。</li><li>订单业务本质入手，redis设置过期时间。防止短时间内，用户和商品进行多次连接。可以用”用户ID+分隔符+商品ID“作为唯一标识，让持有相同标识的请求在短时间内不能重复下单。</li></ol><h2 id="_102、水平分表如何保持id的唯一性" tabindex="-1">102、水平分表如何保持id的唯一性？ <a class="header-anchor" href="#_102、水平分表如何保持id的唯一性" aria-label="Permalink to “102、水平分表如何保持id的唯一性？”">​</a></h2><p>分库分表之后，需要保证ID唯一，既然是分库分表，所以不能使用ID自增。常见方案如下及各自优缺点。</p><ul><li><p><strong>UUID</strong></p><p>JDK自带工具类，生成无序的36位字符串，一般去掉中间的4个-，使用32位。</p><ul><li>优点：简单方便，本地生成，出错率低。</li><li>缺点：32个字符串，占用空间较大，无序，写入性能较差，可读性差。</li></ul></li><li><p><strong>雪花算法。</strong></p><p>生成19位long类型整数。组成部分，主要是由毫秒时间戳+5位房间号+5位机器号+12位不同的ID</p><ul><li>优点：有序递增</li><li>缺点：服务器时钟回拨，导致生成相同ID</li></ul></li><li><p><strong>Redis通过自增命令来生成分布式ID</strong></p><ul><li>优点：单调递增，不影响数据库写入性能，可读性高</li><li>缺点：需要额外引入redis，链路变长导致出错概率增加。开发成本相对较高。</li></ul></li><li><p><strong>数据库号段</strong></p><p>数据库号段，是在“数据库⾃增ID”⽅案上做的优化，实现⽅式如下：</p><p>（1）从中央数据库中获取出⼀批分布式ID，并缓存到分布式ID服务本地，业务系统获取分布式ID的时 候，可直接在这个批次内递增取值。</p><p>（2）若该批次分布式ID的号段⽤完，则需要更新数据库中的初始值，再次获取新批次的分布式ID，并重 新缓存到分布式ID服务本地，以供使用</p><p>优点：趋势递增，不会影响数据库的数据写入性能，数据库压力小，可读性高</p><p>缺点：开发成本极高，需要额外引入分布式ID服务和中央数据库，链路边长导致出错率增加。</p></li><li><p><strong>美团Leaf</strong></p><p>改动点：将本地jar变成独立服务，并引入zookeeper来解决时钟回拨问题</p><p>优点：解决了时钟回拨问题。</p><p>缺点：引入zookeeper，增加程序复杂性，链路变长导致出错率增加。</p></li><li><p><strong>滴滴Tinyid</strong></p><p>号段模式的优化</p></li><li><p><strong>百度Uidgenerator</strong></p><p>类似雪花算法，相比较雪花算法，时间bit变少了，而机器ID的bit变多了。</p><p>时间回拨产生的原因：分布式系统中，各机器同步服务器时间，一般每2小时同步一次，在 10ms 以内完成。</p><p>解决时钟回拨：传统的雪花算法都是通过<code>System.currentTimeMillis()</code>来获取时间并与上一次时间进行比对，这样严重依赖服务器时间。而百度的时间类型是<code>AtomicLong</code>，且通过<code>incrementAndGet()</code>方法获取下一次时间，从而脱离了对服务器的依赖，也不会有时间回拨的问题（这种做法也有一个小问题，即分布式ID中的时间信息可能并不是这个ID真正产生的时间点）</p></li><li><p><strong>MongoDB的ObjectID</strong></p><p>类似雪花算法，通过时间+机器码+pid+inc共12个字节，通过4+3+2+3的方式最终标识成一个24长度的十六进制字符。</p></li><li><p><strong>zookeeper生成唯一ID</strong> （不推荐）</p></li></ul><h2 id="_021、京东金融是如何通过乐观锁解决并发数据冲突的" tabindex="-1">021、京东金融是如何通过乐观锁解决并发数据冲突的？ <a class="header-anchor" href="#_021、京东金融是如何通过乐观锁解决并发数据冲突的" aria-label="Permalink to “021、京东金融是如何通过乐观锁解决并发数据冲突的？”">​</a></h2><p>悲观锁（行锁）：<code>select * from user where id = 1 for update</code>，并发性太差，阻塞。</p><p>乐观锁：加入字段<code>version</code>，先查询出version的值，进行更新操作时<code>update user set age = 1,version=version+1 where id = 1 and version = 1</code>，where条件带上version=xx，则此时高并发下，其他线程会更新失败。处理方式</p><ul><li>前端应用提示“数据正在处理，请稍后重试！”。交给前端处理，引导用户重试</li><li>附加spring-retry在service上进行方法重试。<code>@Retryable(value = {VersionException.class}, maxAttempts = 3)</code></li></ul><p>mysql默认隔离级别是RR（可重复读）， 会使用next lock锁进制，来防止幻读问题，但是引入锁进制后，锁的代价会比较高，比较耗费CPU资源，占用系统性能；</p><h2 id="_022、阿里开发规范解读-为啥禁止三表join关联" tabindex="-1">022、阿里开发规范解读，为啥禁止三表Join关联？ <a class="header-anchor" href="#_022、阿里开发规范解读-为啥禁止三表join关联" aria-label="Permalink to “022、阿里开发规范解读，为啥禁止三表Join关联？”">​</a></h2><ul><li>产品强制要求，阿里OceanBase只允许2表关联，MyCat只支持2表关联</li><li>Mysql自身设计缺陷，超过3表关联时，MySQL的SQL优化器做的不好，NLJ多级嵌套性能差</li></ul><p>解决方案：</p><ul><li>小数据量，临时方案，inner join 。使用in，先查a，然后 from b in (a)</li><li>反范式，多表组合成一张表。</li><li>银行常用解决方案T+1，数据延迟一天<img src="'+r+'" alt="1728401559319"></li></ul><h2 id="_024、前后端分离架构下jwt认证该怎么设计" tabindex="-1">024、前后端分离架构下JWT认证该怎么设计？ <a class="header-anchor" href="#_024、前后端分离架构下jwt认证该怎么设计" aria-label="Permalink to “024、前后端分离架构下JWT认证该怎么设计？”">​</a></h2><p>JWT：json web token。三个部分</p><ul><li><p>标头。包含加密算法</p></li><li><p>载荷Payload。包含自定义的信息</p></li><li><p>签名加密。base64编码+私钥secret。用来数据校验</p></li><li><p>统一认证，JWT校验无感知，验签过程无侵入，执行效率低，在网关处进行验证，适用于并发小的企业级应用</p></li></ul><p><img src="'+s+'" alt="1728478469868"></p><ul><li><p>控制更加灵活，有一定的代码侵入，代码可以灵活控制，适用于追求性能互联网应用</p><p>需要验签的时候，自定义注解，利用Aop做验签</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CheckJwt</span></span></code></pre></div><p><img src="'+o+'" alt="1728478905520"></p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to “”">​</a></h3></li></ul><h2 id="_025、无状态的jwt令牌如何实现续签功能" tabindex="-1">025、无状态的JWT令牌如何实现续签功能？ <a class="header-anchor" href="#_025、无状态的jwt令牌如何实现续签功能" aria-label="Permalink to “025、无状态的JWT令牌如何实现续签功能？”">​</a></h2><ol><li><p>不允许改变token令牌实现续签</p><ul><li><p>利用redis的过期时间，生成MD5时加入环境特征，尽量避免人为盗取，不适用token作为key，导致key太长了，但意味着JWT是有状态的（缺点）。</p><p><img src="'+t+'" alt="1728480022289"></p></li></ul></li><li><p>允许改变JWT实现续签</p><ul><li><p>access_token</p></li><li><p>refresh_token</p><p>设置不同的过期时间，重新去认证中心生成token</p><p><img src="'+n+'" alt="1728480989806"></p></li></ul></li><li><p>续约时多线程的重发JWT问题解决</p><ul><li>认证中心设计一个计时Map数据结构</li><li>只记录过去n秒内的原始jwt刷新所生成jwt数据</li><li>几秒内如果发现同样的jwt再次请求刷新，就返回相同的新jwt数据</li></ul></li></ol><h2 id="_026、公共表在分布式架构下该如何访问" tabindex="-1">026、公共表在分布式架构下该如何访问？ <a class="header-anchor" href="#_026、公共表在分布式架构下该如何访问" aria-label="Permalink to “026、公共表在分布式架构下该如何访问？”">​</a></h2><p><img src="'+d+'" alt="1728656679860"></p><p><img src="'+c+'" alt="1728656713055"></p><p><img src="'+h+'" alt="1728656735485"></p><h2 id="_027、分享一套炒鸡经典的web高可用架构" tabindex="-1">027、分享一套炒鸡经典的Web高可用架构 <a class="header-anchor" href="#_027、分享一套炒鸡经典的web高可用架构" aria-label="Permalink to “027、分享一套炒鸡经典的Web高可用架构”">​</a></h2><p><img src="'+_+'" alt="1728657523894"></p><p>DNS轮询的缺点</p><ul><li>只负责IP轮询获取，不保证节点可用</li><li>DNS IP列表变更有延时</li><li>外网IP占用严重</li></ul><p><img src="'+m+'" alt="1728657550291"></p><h2 id="_028、大厂必备技能-白话redis-cluster集群模式" tabindex="-1">028、大厂必备技能，白话Redis Cluster集群模式 <a class="header-anchor" href="#_028、大厂必备技能-白话redis-cluster集群模式" aria-label="Permalink to “028、大厂必备技能，白话Redis Cluster集群模式”">​</a></h2><ul><li><p>Cluster模式是Redis3.0开始推出</p></li><li><p>采用无中心结构，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接</p></li><li><p>官方要求：至少6个节点才可以保证高可用，即3主3从；扩展性强、更好做到高可用</p></li><li><p>每个节点会互相通讯，采用gossip协议交换节点元数据信息</p></li><li><p>数据分散存储到各个节点上</p></li></ul><p><strong>哨兵模式Sentinel：</strong></p><p><img src="'+g+'" alt="1728998403946"></p><p>每个节点持有全量数据，且数据保持一致性，为系统Redis高可用</p><p><strong>集群模式：</strong></p><p><img src="'+b+'" alt="1728998451595"></p><p><img src="'+u+'" alt="1728998477260"></p><p><img src="'+k+'" alt="1728998519268"></p><p>redis集群发生故障后，如果主发生故障，则将从升级为主，和其他节点进行数据同步，则主降级为从。</p><p>如果主从都挂掉，则服务不可用，则资源足够的情况下，建议一主2从，提高可用性</p><h2 id="_029、mysql脏读、幻读、不可重复读你能分清吗" tabindex="-1">029、MySQL脏读、幻读、不可重复读你能分清吗？ <a class="header-anchor" href="#_029、mysql脏读、幻读、不可重复读你能分清吗" aria-label="Permalink to “029、MySQL脏读、幻读、不可重复读你能分清吗？”">​</a></h2><p><img src="'+f+'" alt="1729000715682"></p><p><img src="'+x+'" alt="1729000738283"></p><h2 id="_035、到底什么是蓝绿、红黑、灰度发布" tabindex="-1">035、到底什么是蓝绿、红黑、灰度发布 <a class="header-anchor" href="#_035、到底什么是蓝绿、红黑、灰度发布" aria-label="Permalink to “035、到底什么是蓝绿、红黑、灰度发布”">​</a></h2><ul><li><p>全量</p><p>蓝绿：运行时2个集群。先停一个，升级，切换升级后的，通知断开另一个集群，升级另一个、再进行2个集群负载</p><ul><li>缺点：变成单集群的时间段，可能会造成过载。</li></ul><p>红黑：运行时1个集群。直接升级新增的集群，然后直接切换到新的集群，停掉旧集群。</p><ul><li>优点：充分利用了云计算的弹性伸缩优势，获得2个收益，1简化了流程。2避免了在升级过程中，由于只有一半的服务器提供服务，而可能导致的系统过载问题。</li></ul></li><li><p>增量</p><p>灰度发布（金丝雀发布）：新旧版本同时为用户提供服务。</p><ul><li>遇到的挑战1：数据库变更对旧版本的兼容性影响，如果在未来考虑灰度发布，要求团队必须明确SQL字段。TIPS：任何删除，更新字段信息的操作都要额外谨慎。</li><li>挑战2：灰度用户发布群的选择，不能直接采用类似Nginx的权重Weight，会导致一个用户不同请求在新旧版本反复横跳，出现无法预期的bug。解决方案：利用Nginx + Lua脚本化，基于IP或UA等用户稳定特性然后hash取模来决定访问新旧版本，用户ID更稳定，ip有机率不稳定。</li></ul></li></ul><p><strong>对于新旧版本无法协同作业的情况</strong></p><ul><li><p>方案一</p><p>放弃灰度，采用红黑方式全量发布。意味着大量测试，压测，自动化等</p></li><li><p>方案二</p><p>可以考虑独立部署数据源进行迁移，新旧版本分配独立数据源，但数据同步是个问题。</p></li></ul><h2 id="_036、阿里开发规范解读-小心mysql索引选择性陷阱" tabindex="-1">036、阿里开发规范解读，小心MySQL索引选择性陷阱 <a class="header-anchor" href="#_036、阿里开发规范解读-小心mysql索引选择性陷阱" aria-label="Permalink to “036、阿里开发规范解读，小心MySQL索引选择性陷阱”">​</a></h2><p>索引：<a href="https://blog.csdn.net/ougaii_/article/details/145420203" target="_blank" rel="noreferrer">https://blog.csdn.net/ougaii_/article/details/145420203</a></p><p>【强制】：所有查询禁止是由左like和全like，这样会导致不走索引。如果需要使用搜索引擎。</p><ol><li>聚集索引：单说就是在索引树的叶子节点中存储了整行全部数据。在 MySQL 的 InnoDB 存储引擎中使用 B+ 树 时，每个表必须有聚集索引，当我们创建主键后，主键索引生成的索引树就是聚集索引。就算我们不设置主键，MySQL 也会用隐藏的 RowID 之类的隐藏字段帮我们生成一个聚集索引。</li></ol><p><img src="'+D+'" alt="image-20250708213402953"></p><p><strong>陷阱</strong></p><ol><li><p>区分度（选择性）太小，索引优化器，也会导致不走索引。</p><p>select * from user where phone like &#39;1%&#39;</p></li><li><p>不严谨的解释，命中的索引值超过总量的25%，就可能导致索引选择性陷阱，导致全表扫描。PS：一切以Explain执行计划为准。</p></li></ol><p><strong>解决办法</strong></p><ol><li>查询时增加其他字段，利用组合索引。select * from user where sex = 1 and dept = &#39;财务部&#39;</li><li>使用ES、Solr等中间件（更换数据源），能解决全文检索。 <ol><li>但会带来架构、运维的复杂性。</li><li>数据同步，一致性问题如何保证（每5分钟做一次任务调度数据同步、Canal监控binlog订阅、MQ）。</li></ol></li><li>强制使用索引（有时会有奇效）explain select * from user force index(sex) where sex = 1</li><li>增加缓存，提高全表扫描速度。 <ol><li>innodb_buffer_pool_size = 16G</li><li>innodb_buffer_pool_instances=2。缓冲池的多个实例，减少线程间的资源竞争，锁竞争导致的性能瓶颈。当超过1G时，建议设置实例数&gt;1，尽量保持1个实例在1G左右。最大为64。</li></ol></li></ol><h2 id="_037、为什么软件设计时要禁用jdk序列化" tabindex="-1">037、为什么软件设计时要禁用JDK序列化？ <a class="header-anchor" href="#_037、为什么软件设计时要禁用jdk序列化" aria-label="Permalink to “037、为什么软件设计时要禁用JDK序列化？”">​</a></h2><p>java序列化后是二进制流</p><ol><li>跨平台，使用Json序列化，兼容性问题。</li><li>性能。JAVA序列化执行效率明显低于JSON序列化</li></ol><p>序列化方案：</p><ol><li>SpringBoot内置的Jackson的json序列化</li><li>Dubbo内置hessian(改)序列化方案</li><li>Google的Protocol Buffers序列化</li></ol><h2 id="_039、京东是如何实现应用发布与持续集成-ci-的" tabindex="-1">039、京东是如何实现应用发布与持续集成(CI)的？ <a class="header-anchor" href="#_039、京东是如何实现应用发布与持续集成-ci-的" aria-label="Permalink to “039、京东是如何实现应用发布与持续集成(CI)的？”">​</a></h2><p><img src="'+I+'" alt="4e220c2a-9035-466e-a2d7-3a87a395e5c0"></p><h2 id="_040、为什么表的主键要使用代理主键-自增编号-而不使用业务主键-身份证号" tabindex="-1">040、为什么表的主键要使用代理主键（自增编号），而不使用业务主键（身份证号） <a class="header-anchor" href="#_040、为什么表的主键要使用代理主键-自增编号-而不使用业务主键-身份证号" aria-label="Permalink to “040、为什么表的主键要使用代理主键（自增编号），而不使用业务主键（身份证号）”">​</a></h2><ol><li>业务主键更浪费空间</li><li>业务主键无序，可能造成写入数据时需要更长组织索引。</li><li>后期分库分表，进行取模，比较麻烦。</li><li>架构层面，涉及多系统，如果业务主键变更，导致其他依赖系统或表难以处理，造成数据无法关联。</li></ol><h2 id="_044、mysql优化190毫秒干到2毫秒" tabindex="-1">044、Mysql优化190毫秒干到2毫秒 <a class="header-anchor" href="#_044、mysql优化190毫秒干到2毫秒" aria-label="Permalink to “044、Mysql优化190毫秒干到2毫秒”">​</a></h2><p>2017年阿里慢SQL挑战。解题思路很重要</p><p><a href="https://www.bilibili.com/video/BV1QA411F7tJ?spm_id_from=333.788.videopod.sections&amp;vd_source=6c29dc1237e5430deed6d6a26952c755" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1QA411F7tJ?spm_id_from=333.788.videopod.sections&amp;vd_source=6c29dc1237e5430deed6d6a26952c755</a></p><p>三个表进行关联a，b，c</p><ol><li>首先explain执行SQL，分析type，是否走了索引</li><li>查看对应字段是否有索引，加入索引，可以加组合索引进行冗余，再执行SQL。</li><li>如果存在索引，但还是没有走索引，即为索引失效，在explain extended sql。可以输出更详细的警告，分析警告，可以知道为什么索引失效。</li><li>可能的原因： <ol><li>数据类型不一致，隐式转换</li><li>外键数据类型不一致。</li></ol></li></ol><p>数据库</p>',74)])])}const M=l(y,[["render",P]]);export{L as __pageData,M as default};
