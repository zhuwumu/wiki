import{_ as l,c as e,a2 as a,o as p}from"./chunks/framework.6NRZc4eo.js";const t="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728401559319.png",s="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728478469868.png",o="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728478905520.png",r="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728480022289.png",n="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728480989806.png",c="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728656679860.png",E="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728656713055.png",d="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728656735485.png",g="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728657523894.png",m="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728657550291.png",h="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998403946.png",u="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998451595.png",_="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998477260.png",k="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998519268.png",b="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1729000715682.png",B="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1729000738283.png",P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"05.架构/架构300讲.md","filePath":"05.架构/架构300讲.md","lastUpdated":null}'),w={name:"05.架构/架构300讲.md"};function D(q,i,f,I,x,A){return p(),e("div",null,i[0]||(i[0]=[a('<h3 id="_101、-如何防止重复提交订单" tabindex="-1">101、 如何防⽌重复提交订单？ <a class="header-anchor" href="#_101、-如何防止重复提交订单" aria-label="Permalink to &quot;101、 如何防⽌重复提交订单？&quot;">​</a></h3><p>重复提交的原因：</p><ul><li>用户多次点击按钮</li><li>nginx或springCloud的gateway的网关层，进行超时重试造成的</li></ul><ol><li>按钮置灰</li><li>预生成全局唯一订单号（后端），利用数据的唯一索引特性，在插入数据库时，如果重复，则插入失败</li><li>前端生成唯一订单号。</li><li>订单业务本质入手，redis设置过期时间。防止短时间内，用户和商品进行多次连接。可以用”用户ID+分隔符+商品ID“作为唯一标识，让持有相同标识的请求在短时间内不能重复下单。</li></ol><h3 id="_102、水平分表如何保持id的唯一性" tabindex="-1">102、水平分表如何保持id的唯一性？ <a class="header-anchor" href="#_102、水平分表如何保持id的唯一性" aria-label="Permalink to &quot;102、水平分表如何保持id的唯一性？&quot;">​</a></h3><p>分库分表之后，需要保证ID唯一，既然是分库分表，所以不能使用ID自增。常见方案如下及各自优缺点。</p><ul><li><p><strong>UUID</strong></p><p>JDK自带工具类，生成无序的36位字符串，一般去掉中间的4个-，使用32位。</p><ul><li>优点：简单方便，本地生成，出错率低。</li><li>缺点：32个字符串，占用空间较大，无序，写入性能较差，可读性差。</li></ul></li><li><p><strong>雪花算法。</strong></p><p>生成19位long类型整数。组成部分，主要是由毫秒时间戳+5位房间号+5位机器号+12位不同的ID</p><ul><li>优点：有序递增</li><li>缺点：服务器时钟回拨，导致生成相同ID</li></ul></li><li><p><strong>Redis通过自增命令来生成分布式ID</strong></p><ul><li>优点：单调递增，不影响数据库写入性能，可读性高</li><li>缺点：需要额外引入redis，链路变长导致出错概率增加。开发成本相对较高。</li></ul></li><li><p><strong>数据库号段</strong></p><p>数据库号段，是在“数据库⾃增ID”⽅案上做的优化，实现⽅式如下：</p><p>（1）从中央数据库中获取出⼀批分布式ID，并缓存到分布式ID服务本地，业务系统获取分布式ID的时 候，可直接在这个批次内递增取值。</p><p>（2）若该批次分布式ID的号段⽤完，则需要更新数据库中的初始值，再次获取新批次的分布式ID，并重 新缓存到分布式ID服务本地，以供使用</p><p>优点：趋势递增，不会影响数据库的数据写入性能，数据库压力小，可读性高</p><p>缺点：开发成本极高，需要额外引入分布式ID服务和中央数据库，链路边长导致出错率增加。</p></li><li><p><strong>美团Leaf</strong></p><p>改动点：将本地jar变成独立服务，并引入zookeeper来解决时钟回拨问题</p><p>优点：解决了时钟回拨问题。</p><p>缺点：引入zookeeper，增加程序复杂性，链路变长导致出错率增加。</p></li><li><p><strong>滴滴Tinyid</strong></p><p>号段模式的优化</p></li><li><p><strong>百度Uidgenerator</strong></p><p>类似雪花算法，相比较雪花算法，时间bit变少了，而机器ID的bit变多了。</p><p>时间回拨产生的原因：分布式系统中，各机器同步服务器时间，一般每2小时同步一次，在 10ms 以内完成。</p><p>解决时钟回拨：传统的雪花算法都是通过<code>System.currentTimeMillis()</code>来获取时间并与上一次时间进行比对，这样严重依赖服务器时间。而百度的时间类型是<code>AtomicLong</code>，且通过<code>incrementAndGet()</code>方法获取下一次时间，从而脱离了对服务器的依赖，也不会有时间回拨的问题（这种做法也有一个小问题，即分布式ID中的时间信息可能并不是这个ID真正产生的时间点）</p></li><li><p><strong>MongoDB的ObjectID</strong></p><p>类似雪花算法，通过时间+机器码+pid+inc共12个字节，通过4+3+2+3的方式最终标识成一个24长度的十六进制字符。</p></li><li><p><strong>zookeeper生成唯一ID</strong> （不推荐）</p></li></ul><h3 id="_021、京东金融是如何通过乐观锁解决并发数据冲突的" tabindex="-1">021、京东金融是如何通过乐观锁解决并发数据冲突的？ <a class="header-anchor" href="#_021、京东金融是如何通过乐观锁解决并发数据冲突的" aria-label="Permalink to &quot;021、京东金融是如何通过乐观锁解决并发数据冲突的？&quot;">​</a></h3><p>悲观锁（行锁）：<code>select * from user where id = 1 for update</code>，并发性太差，阻塞。</p><p>乐观锁：加入字段<code>version</code>，先查询出version的值，进行更新操作时<code>update user set age = 1,version=version+1 where id = 1 and version = 1</code>，where条件带上version=xx，则此时高并发下，其他线程会更新失败。处理方式</p><ul><li>前端应用提示“数据正在处理，请稍后重试！”。交给前端处理，引导用户重试</li><li>附加spring-retry在service上进行方法重试。<code>@Retryable(value = {VersionException.class}, maxAttempts = 3)</code></li></ul><p>mysql默认隔离级别是RR（可重复读）， 会使用next lock锁进制，来防止幻读问题，但是引入锁进制后，锁的代价会比较高，比较耗费CPU资源，占用系统性能；</p><h3 id="_022、阿里开发规范解读-为啥禁止三表join关联" tabindex="-1">022、阿里开发规范解读，为啥禁止三表Join关联？ <a class="header-anchor" href="#_022、阿里开发规范解读-为啥禁止三表join关联" aria-label="Permalink to &quot;022、阿里开发规范解读，为啥禁止三表Join关联？&quot;">​</a></h3><ul><li>产品强制要求，阿里OceanBase只允许2表关联，MyCat只支持2表关联</li><li>Mysql自身设计缺陷，超过3表关联时，MySQL的SQL优化器做的不好，NLJ多级嵌套性能差</li></ul><p>解决方案：</p><ul><li>小数据量，临时方案，inner join 。使用in，先查a，然后 from b in (a)</li><li>反范式，多表组合成一张表。</li><li>银行常用解决方案T+1，数据延迟一天<img src="'+t+'" alt="1728401559319"></li></ul><h3 id="_024、前后端分离架构下jwt认证该怎么设计" tabindex="-1">024、前后端分离架构下JWT认证该怎么设计？ <a class="header-anchor" href="#_024、前后端分离架构下jwt认证该怎么设计" aria-label="Permalink to &quot;024、前后端分离架构下JWT认证该怎么设计？&quot;">​</a></h3><p>JWT：json web token。三个部分</p><ul><li><p>标头。包含加密算法</p></li><li><p>载荷Payload。包含自定义的信息</p></li><li><p>签名加密。base64编码+私钥secret。用来数据校验</p></li><li><p>统一认证，JWT校验无感知，验签过程无侵入，执行效率低，在网关处进行验证，适用于并发小的企业级应用</p></li></ul><p><img src="'+s+'" alt="1728478469868"></p><ul><li><p>控制更加灵活，有一定的代码侵入，代码可以灵活控制，适用于追求性能互联网应用</p><p>需要验签的时候，自定义注解，利用Aop做验签</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CheckJwt</span></span></code></pre></div><p><img src="'+o+'" alt="1728478905520"></p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3></li></ul><h3 id="_025、无状态的jwt令牌如何实现续签功能" tabindex="-1">025、无状态的JWT令牌如何实现续签功能？ <a class="header-anchor" href="#_025、无状态的jwt令牌如何实现续签功能" aria-label="Permalink to &quot;025、无状态的JWT令牌如何实现续签功能？&quot;">​</a></h3><ol><li><p>不允许改变token令牌实现续签</p><ul><li><p>利用redis的过期时间，生成MD5时加入环境特征，尽量避免人为盗取，不适用token作为key，导致key太长了，但意味着JWT是有状态的（缺点）。</p><p><img src="'+r+'" alt="1728480022289"></p></li></ul></li><li><p>允许改变JWT实现续签</p><ul><li><p>access_token</p></li><li><p>refresh_token</p><p>设置不同的过期时间，重新去认证中心生成token</p><p><img src="'+n+'" alt="1728480989806"></p></li></ul></li><li><p>续约时多线程的重发JWT问题解决</p><ul><li>认证中心设计一个计时Map数据结构</li><li>只记录过去n秒内的原始jwt刷新所生成jwt数据</li><li>几秒内如果发现同样的jwt再次请求刷新，就返回相同的新jwt数据</li></ul></li></ol><h3 id="_026、公共表在分布式架构下该如何访问" tabindex="-1">026、公共表在分布式架构下该如何访问？ <a class="header-anchor" href="#_026、公共表在分布式架构下该如何访问" aria-label="Permalink to &quot;026、公共表在分布式架构下该如何访问？&quot;">​</a></h3><p><img src="'+c+'" alt="1728656679860"></p><p><img src="'+E+'" alt="1728656713055"></p><p><img src="'+d+'" alt="1728656735485"></p><h3 id="_027、分享一套炒鸡经典的web高可用架构" tabindex="-1">027、分享一套炒鸡经典的Web高可用架构 <a class="header-anchor" href="#_027、分享一套炒鸡经典的web高可用架构" aria-label="Permalink to &quot;027、分享一套炒鸡经典的Web高可用架构&quot;">​</a></h3><p><img src="'+g+'" alt="1728657523894"></p><p>DNS轮询的缺点</p><ul><li>只负责IP轮询获取，不保证节点可用</li><li>DNS IP列表变更有延时</li><li>外网IP占用严重</li></ul><p><img src="'+m+'" alt="1728657550291"></p><h3 id="_028、大厂必备技能-白话redis-cluster集群模式" tabindex="-1">028、大厂必备技能，白话Redis Cluster集群模式 <a class="header-anchor" href="#_028、大厂必备技能-白话redis-cluster集群模式" aria-label="Permalink to &quot;028、大厂必备技能，白话Redis Cluster集群模式&quot;">​</a></h3><ul><li><p>Cluster模式是Redis3.0开始推出</p></li><li><p>采用无中心结构，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接</p></li><li><p>官方要求：至少6个节点才可以保证高可用，即3主3从；扩展性强、更好做到高可用</p></li><li><p>每个节点会互相通讯，采用gossip协议交换节点元数据信息</p></li><li><p>数据分散存储到各个节点上</p></li></ul><p><strong>哨兵模式Sentinel：</strong></p><p><img src="'+h+'" alt="1728998403946"></p><p>每个节点持有全量数据，且数据保持一致性，为系统Redis高可用</p><p><strong>集群模式：</strong></p><p><img src="'+u+'" alt="1728998451595"></p><p><img src="'+_+'" alt="1728998477260"></p><p><img src="'+k+'" alt="1728998519268"></p><p>redis集群发生故障后，如果主发生故障，则将从升级为主，和其他节点进行数据同步，则主降级为从。</p><p>如果主从都挂掉，则服务不可用，则资源足够的情况下，建议一主2从，提高可用性</p><h3 id="_029、mysql脏读、幻读、不可重复读你能分清吗" tabindex="-1">029、MySQL脏读、幻读、不可重复读你能分清吗？ <a class="header-anchor" href="#_029、mysql脏读、幻读、不可重复读你能分清吗" aria-label="Permalink to &quot;029、MySQL脏读、幻读、不可重复读你能分清吗？&quot;">​</a></h3><p><img src="'+b+'" alt="1729000715682"></p><p><img src="'+B+'" alt="1729000738283"></p>',46)]))}const v=l(w,[["render",D]]);export{P as __pageData,v as default};
