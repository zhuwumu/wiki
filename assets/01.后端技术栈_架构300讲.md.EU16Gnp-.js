import{_ as e,c as a,a2 as l,o as s}from"./chunks/framework.6NRZc4eo.js";const t="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728401559319.png",p="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728478469868.png",r="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728478905520.png",o="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728480022289.png",n="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728480989806.png",E="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728656679860.png",c="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728656713055.png",m="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728656735485.png",d="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728657523894.png",h="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728657550291.png",g="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998403946.png",_="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998451595.png",u="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998477260.png",k="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1728998519268.png",B="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1729000715682.png",b="/wiki/images/%E6%9E%B6%E6%9E%84300%E8%AE%B2/1729000738283.png",j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01.后端技术栈/架构300讲.md","filePath":"01.后端技术栈/架构300讲.md","lastUpdated":null}'),w={name:"01.后端技术栈/架构300讲.md"};function q(f,i,A,x,v,y){return s(),a("div",null,i[0]||(i[0]=[l('<h3 id="_021、京东金融是如何通过乐观锁解决并发数据冲突的" tabindex="-1">021、京东金融是如何通过乐观锁解决并发数据冲突的？ <a class="header-anchor" href="#_021、京东金融是如何通过乐观锁解决并发数据冲突的" aria-label="Permalink to &quot;021、京东金融是如何通过乐观锁解决并发数据冲突的？&quot;">​</a></h3><p>悲观锁（行锁）：<code>select * from user where id = 1 for update</code>，并发性太差，阻塞。</p><p>乐观锁：加入字段<code>version</code>，先查询出version的值，进行更新操作时<code>update user set age = 1,version=version+1 where id = 1 and version = 1</code>，where条件带上version=xx，则此时高并发下，其他线程会更新失败。处理方式</p><ul><li>前端应用提示“数据正在处理，请稍后重试！”。交给前端处理，引导用户重试</li><li>附加spring-retry在service上进行方法重试。<code>@Retryable(value = {VersionException.class}, maxAttempts = 3)</code></li></ul><p>mysql默认隔离级别是RR（可重复读）， 会使用next lock锁进制，来防止幻读问题，但是引入锁进制后，锁的代价会比较高，比较耗费CPU资源，占用系统性能；</p><h3 id="_022、阿里开发规范解读-为啥禁止三表join关联" tabindex="-1">022、阿里开发规范解读，为啥禁止三表Join关联？ <a class="header-anchor" href="#_022、阿里开发规范解读-为啥禁止三表join关联" aria-label="Permalink to &quot;022、阿里开发规范解读，为啥禁止三表Join关联？&quot;">​</a></h3><ul><li>产品强制要求，阿里OceanBase只允许2表关联，MyCat只支持2表关联</li><li>Mysql自身设计缺陷，超过3表关联时，MySQL的SQL优化器做的不好，NLJ多级嵌套性能差</li></ul><p>解决方案：</p><ul><li>小数据量，临时方案，inner join 。使用in，先查a，然后 from b in (a)</li><li>反范式，多表组合成一张表。</li><li>银行常用解决方案T+1，数据延迟一天<img src="'+t+'" alt="1728401559319"></li></ul><h3 id="_024、前后端分离架构下jwt认证该怎么设计" tabindex="-1">024、前后端分离架构下JWT认证该怎么设计？ <a class="header-anchor" href="#_024、前后端分离架构下jwt认证该怎么设计" aria-label="Permalink to &quot;024、前后端分离架构下JWT认证该怎么设计？&quot;">​</a></h3><p>JWT：json web token。三个部分</p><ul><li><p>标头。包含加密算法</p></li><li><p>载荷Payload。包含自定义的信息</p></li><li><p>签名加密。base64编码+私钥secret。用来数据校验</p></li><li><p>统一认证，JWT校验无感知，验签过程无侵入，执行效率低，在网关处进行验证，适用于并发小的企业级应用</p></li></ul><p><img src="'+p+'" alt="1728478469868"></p><ul><li><p>控制更加灵活，有一定的代码侵入，代码可以灵活控制，适用于追求性能互联网应用</p><p>需要验签的时候，自定义注解，利用Aop做验签</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CheckJwt</span></span></code></pre></div><p><img src="'+r+'" alt="1728478905520"></p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3></li></ul><h3 id="_025、无状态的jwt令牌如何实现续签功能" tabindex="-1">025、无状态的JWT令牌如何实现续签功能？ <a class="header-anchor" href="#_025、无状态的jwt令牌如何实现续签功能" aria-label="Permalink to &quot;025、无状态的JWT令牌如何实现续签功能？&quot;">​</a></h3><ol><li><p>不允许改变token令牌实现续签</p><ul><li><p>利用redis的过期时间，生成MD5时加入环境特征，尽量避免人为盗取，不适用token作为key，导致key太长了，但意味着JWT是有状态的（缺点）。</p><p><img src="'+o+'" alt="1728480022289"></p></li></ul></li><li><p>允许改变JWT实现续签</p><ul><li><p>access_token</p></li><li><p>refresh_token</p><p>设置不同的过期时间，重新去认证中心生成token</p><p><img src="'+n+'" alt="1728480989806"></p></li></ul></li><li><p>续约时多线程的重发JWT问题解决</p><ul><li>认证中心设计一个计时Map数据结构</li><li>只记录过去n秒内的原始jwt刷新所生成jwt数据</li><li>几秒内如果发现同样的jwt再次请求刷新，就返回相同的新jwt数据</li></ul></li></ol><h3 id="_026、公共表在分布式架构下该如何访问" tabindex="-1">026、公共表在分布式架构下该如何访问？ <a class="header-anchor" href="#_026、公共表在分布式架构下该如何访问" aria-label="Permalink to &quot;026、公共表在分布式架构下该如何访问？&quot;">​</a></h3><p><img src="'+E+'" alt="1728656679860"></p><p><img src="'+c+'" alt="1728656713055"></p><p><img src="'+m+'" alt="1728656735485"></p><h3 id="_027、分享一套炒鸡经典的web高可用架构" tabindex="-1">027、分享一套炒鸡经典的Web高可用架构 <a class="header-anchor" href="#_027、分享一套炒鸡经典的web高可用架构" aria-label="Permalink to &quot;027、分享一套炒鸡经典的Web高可用架构&quot;">​</a></h3><p><img src="'+d+'" alt="1728657523894"></p><p>DNS轮询的缺点</p><ul><li>只负责IP轮询获取，不保证节点可用</li><li>DNS IP列表变更有延时</li><li>外网IP占用严重</li></ul><p><img src="'+h+'" alt="1728657550291"></p><h3 id="_028、大厂必备技能-白话redis-cluster集群模式" tabindex="-1">028、大厂必备技能，白话Redis Cluster集群模式 <a class="header-anchor" href="#_028、大厂必备技能-白话redis-cluster集群模式" aria-label="Permalink to &quot;028、大厂必备技能，白话Redis Cluster集群模式&quot;">​</a></h3><ul><li><p>Cluster模式是Redis3.0开始推出</p></li><li><p>采用无中心结构，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接</p></li><li><p>官方要求：至少6个节点才可以保证高可用，即3主3从；扩展性强、更好做到高可用</p></li><li><p>每个节点会互相通讯，采用gossip协议交换节点元数据信息</p></li><li><p>数据分散存储到各个节点上</p></li></ul><p><strong>哨兵模式Sentinel：</strong></p><p><img src="'+g+'" alt="1728998403946"></p><p>每个节点持有全量数据，且数据保持一致性，为系统Redis高可用</p><p><strong>集群模式：</strong></p><p><img src="'+_+'" alt="1728998451595"></p><p><img src="'+u+'" alt="1728998477260"></p><p><img src="'+k+'" alt="1728998519268"></p><p>redis集群发生故障后，如果主发生故障，则将从升级为主，和其他节点进行数据同步，则主降级为从。</p><p>如果主从都挂掉，则服务不可用，则资源足够的情况下，建议一主2从，提高可用性</p><h3 id="_029、面试官-mysql脏读、幻读、不可重复读你能分清吗" tabindex="-1">029、面试官：MySQL脏读、幻读、不可重复读你能分清吗？ <a class="header-anchor" href="#_029、面试官-mysql脏读、幻读、不可重复读你能分清吗" aria-label="Permalink to &quot;029、面试官：MySQL脏读、幻读、不可重复读你能分清吗？&quot;">​</a></h3><p><img src="'+B+'" alt="1729000715682"></p><p><img src="'+b+'" alt="1729000738283"></p>',39)]))}const J=e(w,[["render",q]]);export{j as __pageData,J as default};
