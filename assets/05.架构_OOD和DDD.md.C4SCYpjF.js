import{_ as e,c as l,o,ah as D}from"./chunks/framework.DVT8N-ZV.js";const _=JSON.parse('{"title":"OOD和DDD","description":"","frontmatter":{},"headers":[],"relativePath":"05.架构/OOD和DDD.md","filePath":"05.架构/OOD和DDD.md","lastUpdated":null}'),i={name:"05.架构/OOD和DDD.md"};function r(d,a,t,n,s,h){return o(),l("div",null,[...a[0]||(a[0]=[D('<h1 id="ood和ddd" tabindex="-1">OOD和DDD <a class="header-anchor" href="#ood和ddd" aria-label="Permalink to “OOD和DDD”">​</a></h1><h2 id="ood" tabindex="-1">OOD <a class="header-anchor" href="#ood" aria-label="Permalink to “OOD”">​</a></h2><blockquote><p>面向对象设计</p></blockquote><h2 id="ddd" tabindex="-1">DDD <a class="header-anchor" href="#ddd" aria-label="Permalink to “DDD”">​</a></h2><blockquote><p>Domain-Driven Design的缩写。主要思想，我们在设计软件时，理解真正的业务含义，将业务中的一些概念吸收到软件建模中，避免造出“大而无用”软件。也避免软件设计没有内在联系，否则一团散沙，无法继续演进。</p></blockquote><h3 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to “要求”">​</a></h3><ol><li>非常熟悉业务的教练</li><li>依赖导致</li><li>语义维护</li></ol><h3 id="失败案例" tabindex="-1">失败案例 <a class="header-anchor" href="#失败案例" aria-label="Permalink to “失败案例”">​</a></h3><ol><li>中国移动X公司承认DDD转型失败，原有项目重构失败。</li><li>京东到家只采用了DDD的领域分析，技术因无法与现有系统衔接无法落地。</li><li>某四大行研发中心内部推行两年，程序员依然在MVC开发。</li></ol>',9)])])}const O=e(i,[["render",r]]);export{_ as __pageData,O as default};
