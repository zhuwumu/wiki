import{_ as s,c as a,o as l,ah as h,at as e}from"./chunks/framework.Dgw6jcLr.js";const o=JSON.parse('{"title":"SQL优化","description":"","frontmatter":{},"headers":[],"relativePath":"03.数据库/MySql-SQL优化.md","filePath":"03.数据库/MySql-SQL优化.md","lastUpdated":null}'),t={name:"03.数据库/MySql-SQL优化.md"};function n(k,i,p,r,d,g){return l(),a("div",null,[...i[0]||(i[0]=[h('<h1 id="sql优化" tabindex="-1">SQL优化 <a class="header-anchor" href="#sql优化" aria-label="Permalink to “SQL优化”">​</a></h1><h2 id="如何排查慢sql" tabindex="-1">如何排查慢SQL <a class="header-anchor" href="#如何排查慢sql" aria-label="Permalink to “如何排查慢SQL”">​</a></h2><p>慢 SQL 指的是 MySQL 中执行比较慢的 SQL，排查慢 SQL 最常用的方法是通过慢查询日志来查找慢 SQL。 MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阀值的语句，具体指运行时间超过 long_query_time 值的 SQL，就会被记录到慢查询日志中，long_query_time 的默认值为 10s，意思是运行超过 10s 以上的语句就会被当做慢 SQL 记录到日志中。</p><h3 id="查看慢-sql-是否开启" tabindex="-1">查看慢 SQL 是否开启 <a class="header-anchor" href="#查看慢-sql-是否开启" aria-label="Permalink to “查看慢 SQL 是否开启”">​</a></h3><p>可以使用 SQL 命令来查看慢 SQL 记录功能是否开启，使用 <code>mysql&gt; show variables like &#39;%slow_query_log%&#39;;</code> 来查询慢查询日志是否开启，执行效果如下图所示：</p><p><img src="'+e+`" alt=""></p><p>slow_query_log 的值为 OFF 时，表示未开启慢查询日志。</p><h3 id="开启慢-sql-记录" tabindex="-1">开启慢 SQL 记录 <a class="header-anchor" href="#开启慢-sql-记录" aria-label="Permalink to “开启慢 SQL 记录”">​</a></h3><p>开启慢查询日志，可以使用如下 MySQL 命令：</p><blockquote><p>mysql&gt; set global slow_query_log=1</p></blockquote><p>不过这种设置方式，只对当前数据库生效，如果 MySQL 重启也会失效，如果要永久生效，就必须修改 MySQL 的配置文件 my.cnf，配置如下：</p><blockquote><p>slow_query_log =1</p><p>slow_query_log_file=/tmp/mysql_slow.log</p></blockquote><h3 id="分析慢-sql" tabindex="-1">分析慢 SQL <a class="header-anchor" href="#分析慢-sql" aria-label="Permalink to “分析慢 SQL”">​</a></h3><p>得到慢 SQL 之后，可以通过 explain 执行计划分析 MySQL 执行慢的原因并进行优化，比如以下这样： 其中最重要的就是 type 字段，type 值类型如下：</p><ul><li>all — 扫描全表数据</li><li>index — 遍历索引</li><li>range — 索引范围查找</li><li>index_subquery — 在子查询中使用 ref</li><li>unique_subquery — 在子查询中使用 eq_ref</li><li>ref_or_null — 对 null 进行索引的优化的 ref</li><li>fulltext — 使用全文索引</li><li>ref — 使用非唯一索引查找数据</li><li>eq_ref — 在 join 查询中使用主键或唯一索引关联</li><li>const — 将一个主键放置到 where 后面作为条件查询， MySQL 优化器就能把这次查询优化转化为一个常量，如何转化以及何时转化，这个取决于优化器，这个比 eq_ref 效率高一点。</li></ul><p>如果 type=all 说明没走索引，此时就需要给查询慢的字段加上相应索引就可以提高查询效率。 当然，优化慢 SQL 需要综合考虑的因素有很多，比如索引、查询优化（减少联表查询等）、减少锁竞争等因素，所以具体的慢 SQL 优化，需要根据实际的业务场景再做优化决策。</p><h2 id="mysql优化手段有哪些" tabindex="-1">MySQL优化手段有哪些 <a class="header-anchor" href="#mysql优化手段有哪些" aria-label="Permalink to “MySQL优化手段有哪些”">​</a></h2><p>MySQL 优化分为两大类：单表优化和多表优化。如果数据量不大的情况下使用单表优化即可，而如果数据量比较大的情况下可以考虑使用多表优化。</p><h3 id="单表优化" tabindex="-1">单表优化 <a class="header-anchor" href="#单表优化" aria-label="Permalink to “单表优化”">​</a></h3><p>单表优化手段有：</p><ol><li>建立并使用索引：索引是提升查询效率最有效的手段，所以对比查询比较频繁的字段一定要创建合适的索引。创建了索引之后，还要能正常的使用索引。避免过度索引。</li><li>优化查询语句： <ul><li>避免 SELECT *，只查询需要的字段。</li><li>使用小表驱动大表，比如，当 B 表的数据小于 A 表时，先查 B 表，再查 A 表，查询语句：select * from A where id in (select id from B)。</li><li>使用 JOIN 代替子查询，减少嵌套查询的层次。</li><li>合理使用 LIMIT 子句，限制查询结果的数量。</li><li>避免在 WHERE 子句中使用 LIKE &#39;%value%&#39;，这会导致全表扫描。</li></ul></li><li>优化表结构和数据类型：单表不要有太多字段，建议在 20 个字段以内，使用可以存下数据最小的数据类型，尽可能使用 not null 定义字段，因为 null 占用 4 字节空间。</li><li>归档旧数据</li></ol><h3 id="多表优化" tabindex="-1">多表优化 <a class="header-anchor" href="#多表优化" aria-label="Permalink to “多表优化”">​</a></h3><p>多表优化手段有：</p><ol><li>表拆分：也就是分表，让每张表的数据量变小，从而提高查询效率。表拆分又分为：垂直分隔和水平分隔。 <ol><li>垂直拆分：是指数据表列的拆分，把一张列比较多的表拆分为多张表，比如，用户表中一些字段经常被访问，将这些字段放在一张表中，另外一些不常用的字段放在另一张表中，插入数据时，使用事务确保两张表的数据一致性。 <ol><li>垂直拆分的原则： <ol><li>把不常用的字段单独放在一张表；</li><li>把 text，blob 等大字段拆分出来放在附表中；</li><li>经常组合查询的列放在一张表中。</li></ol></li></ol></li><li>水平拆分：指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。通常情况下，我们使用取模的方式来进行表的拆分，比如，一张有 400W 的用户表 users，为提高其查询效率我们把其分成 4 张表 users1，users2，users3，users4，然后通过用户 ID 取模的方法，同时查询、更新、删除也是通过取模的方法来操作。</li></ol></li><li>读写分离：一般情况下对数据库而言都是“读多写少”，换言之，数据库的压力多数是因为大量的读取数据的操作造成的，我们可以采用数据库集群的方案，使用一个库作为主库，负责写入数据；其他库为从库，负责读取数据。这样可以缓解对数据库的访问压力。</li></ol><h3 id="切分大查询" tabindex="-1">切分大查询 <a class="header-anchor" href="#切分大查询" aria-label="Permalink to “切分大查询”">​</a></h3><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DELEFT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DATE_SUB(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), INTERVAL </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MONTH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rows_affected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">do {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rows_affected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> do_query(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows_affected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><h3 id="分解大连接查询" tabindex="-1">分解大连接查询 <a class="header-anchor" href="#分解大连接查询" aria-label="Permalink to “分解大连接查询”">​</a></h3><p>将一个大连接查询分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有:</p><ul><li>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li><li>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</li><li>减少锁竞争；</li><li>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。</li><li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag_post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tag_post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tag_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tag_post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">post_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag_post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">567</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9098</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8904</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="数据库参数调整" tabindex="-1">数据库参数调整 <a class="header-anchor" href="#数据库参数调整" aria-label="Permalink to “数据库参数调整”">​</a></h3><p>innodb_buffer_pool_size</p><p>page页默认16KB，进行调整，减少树高，提高查询速度。</p><h3 id="分布式数据库" tabindex="-1">分布式数据库 <a class="header-anchor" href="#分布式数据库" aria-label="Permalink to “分布式数据库”">​</a></h3><p>例如 TiDB、ES。</p><h3 id="使用缓存" tabindex="-1">使用缓存 <a class="header-anchor" href="#使用缓存" aria-label="Permalink to “使用缓存”">​</a></h3><p>在应用程序级别使用缓存（如 Memcached、Redis 等），减少对数据库的直接访问次数。</p><h3 id="升级硬件" tabindex="-1">升级硬件 <a class="header-anchor" href="#升级硬件" aria-label="Permalink to “升级硬件”">​</a></h3><p><strong>选择高性能的 CPU</strong>：以支持复杂的查询处理和大量的并发访问。</p><p><strong>增加内存容量</strong>：因为 MySQL 使用大量内存来缓存数据和索引，从而提高查询效率。</p><p><strong>使用高速磁盘</strong>：如 SSD（固态硬盘），减少 I/O 等待时间。同时，可以考虑使用 RAID 技术来提高磁盘读写性能和可靠性。</p><p><strong>优化网络配置</strong>：确保数据库服务器与客户端之间的数据传输高效稳定。</p><h2 id="mysql如果要平滑不停机的情况下分库分表怎么做" tabindex="-1">mysql如果要平滑不停机的情况下分库分表怎么做 <a class="header-anchor" href="#mysql如果要平滑不停机的情况下分库分表怎么做" aria-label="Permalink to “mysql如果要平滑不停机的情况下分库分表怎么做”">​</a></h2><p><a href="https://blog.csdn.net/weixin_37057698/article/details/141238107" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_37057698/article/details/141238107</a></p><p><a href="https://blog.csdn.net/kefengwang/article/details/81213050" target="_blank" rel="noreferrer">https://blog.csdn.net/kefengwang/article/details/81213050</a></p><ul><li>第一阶段：在线双写，查询走老库 <ul><li>建立好新的库表结构，数据写入老库的同时，也写入拆分的新库。</li><li>数据迁移，使用数据迁移程序，将旧库中的历史数据迁移到新库。</li><li>使用定时任务，新旧库的数据对比，把差异补齐。</li></ul></li><li>第二阶段：在线双写，查询走新库 <ul><li>完成了历史数据的同步和校验。</li><li>把数据的读切换到新库。</li></ul></li><li>第三阶段：旧库下线 <ul><li>旧库不再写入新的数据</li><li>经过一段时间，确定旧库没有请求之后，可以下线老库。</li></ul></li></ul>`,49)])])}const y=s(t,[["render",n]]);export{o as __pageData,y as default};
