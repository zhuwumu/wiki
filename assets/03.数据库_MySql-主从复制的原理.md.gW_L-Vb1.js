import{_ as s,c as a,o as l,ah as h,ax as e}from"./chunks/framework.Dgw6jcLr.js";const g=JSON.parse('{"title":"主从复制的原理","description":"","frontmatter":{},"headers":[],"relativePath":"03.数据库/MySql-主从复制的原理.md","filePath":"03.数据库/MySql-主从复制的原理.md","lastUpdated":null}'),n={name:"03.数据库/MySql-主从复制的原理.md"};function t(p,i,k,r,d,o){return l(),a("div",null,[...i[0]||(i[0]=[h(`<h1 id="主从复制的原理" tabindex="-1">主从复制的原理 <a class="header-anchor" href="#主从复制的原理" aria-label="Permalink to “主从复制的原理”">​</a></h1><p>MySQL 主从复制（Master-Slave Replication）是一种数据复制技术，用于在多个数据库服务器之间的数据同步。在主从复制架构中，一个服务器被设置为主服务器（Master），充当数据源，其他服务器被设置为从服务器（Slave），用来复制主服务器的数据。</p><h2 id="_1-主从复制优点" tabindex="-1">1.主从复制优点 <a class="header-anchor" href="#_1-主从复制优点" aria-label="Permalink to “1.主从复制优点”">​</a></h2><p>主从复制的主要优点有以下几个：</p><ol><li><strong>高可用性</strong>：通过将主数据库的数据复制到一个或多个从数据库，可以在<strong>主数据库故障时快速切换到从数据库</strong>，以实现系统的高可用性和容错能力，从而保证系统的持续可用性。</li><li><strong>提高整体性能和吞吐量</strong>：通过将读请求分散到多个从服务器上进行处理，从而减轻了主服务器的负载压力，提高数据库系统的整体性能和吞吐量。主服务器主要负责写操作，而从服务器主要负责读操作，从而分担了主服务器的压力。</li><li><strong>数据备份和恢复</strong>：通过主从同步，可以将主服务器上的数据异步复制到从服务器上，从而实现数据备份和灾难恢复的需求。在应对意外数据丢失、灾难恢复或误操作时，可以使用从服务器作为数据的备份源来进行数据恢复。</li></ol><h2 id="_2-如何实现主从复制" tabindex="-1">2.如何实现主从复制？ <a class="header-anchor" href="#_2-如何实现主从复制" aria-label="Permalink to “2.如何实现主从复制？”">​</a></h2><h4 id="_1-配置并重启主服务器" tabindex="-1">① 配置并重启主服务器 <a class="header-anchor" href="#_1-配置并重启主服务器" aria-label="Permalink to “① 配置并重启主服务器”">​</a></h4><p>在主服务器的配置文件（my.cnf）中添加以下参数：</p><blockquote><p>[mysqld] server-id = 1 # 设置服务器 ID，每个主服务器和从服务器都必须有唯一的 ID</p><p>log_bin = /var/log/mysql/mysql-bin.log # 开启二进制日志，记录数据修改操作</p></blockquote><p>以上配置完成之后，重启 MySQL 服务器，因为重启了 MySQL 服务才能让配置生效。</p><h4 id="_2-创建用于主从复制的用户" tabindex="-1">② 创建用于主从复制的用户 <a class="header-anchor" href="#_2-创建用于主从复制的用户" aria-label="Permalink to “② 创建用于主从复制的用户”">​</a></h4><p>登录到主服务器上，执行以下命令：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IDENTIFIED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 替换为实际的用户名和密码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> REPLICATION SLAVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;repl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="_3-查看主服务器状态" tabindex="-1">③ 查看主服务器状态 <a class="header-anchor" href="#_3-查看主服务器状态" aria-label="Permalink to “③ 查看主服务器状态”">​</a></h4><p>在 MySQL 主服务器中，执行以下命令，记录下 File 和 Position 的值，后续用于配置从服务器：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MASTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> STATUS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="_4-配置并重启从服务器" tabindex="-1">④ 配置并重启从服务器 <a class="header-anchor" href="#_4-配置并重启从服务器" aria-label="Permalink to “④ 配置并重启从服务器”">​</a></h4><p>在从服务器的配置文件（my.cnf）中添加以下参数：</p><blockquote><p>[mysqld]</p><p>server-id = 2 # 设置服务器 ID，每个主服务器和从服务器都必须有唯一的 ID</p></blockquote><p>重启从服务器，让以上配置生效。</p><h4 id="_5-在从服务器上设置主服务器信息" tabindex="-1">⑤ 在从服务器上设置主服务器信息 <a class="header-anchor" href="#_5-在从服务器上设置主服务器信息" aria-label="Permalink to “⑤ 在从服务器上设置主服务器信息”">​</a></h4><p>登录到从服务器的 MySQL 中，执行以下命令（将 MASTER_HOST、MASTER_USER、MASTER_PASSWORD、MASTER_LOG_FILE 和 MASTER_LOG_POS 替换为对应的值）：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CHANGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MASTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MASTER_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;master_ip&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MASTER_USER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;repl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MASTER_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MASTER_LOG_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;binlog_file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MASTER_LOG_POS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log_file_position;</span></span></code></pre></div><h4 id="_6-启动从服务器的复制进程" tabindex="-1">⑥ 启动从服务器的复制进程 <a class="header-anchor" href="#_6-启动从服务器的复制进程" aria-label="Permalink to “⑥ 启动从服务器的复制进程”">​</a></h4><p>执行以下命令启动从服务器的复制进程：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">START</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SLAVE;</span></span></code></pre></div><h4 id="_7-检查从服务器的复制状态" tabindex="-1">⑦ 检查从服务器的复制状态 <a class="header-anchor" href="#_7-检查从服务器的复制状态" aria-label="Permalink to “⑦ 检查从服务器的复制状态”">​</a></h4><p>执行以下命令，确保 Slave_IO_Running 和 Slave_SQL_Running 的值都为 &quot;YES&quot;：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW SLAVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STATUS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\G;</span></span></code></pre></div><h2 id="_3-主从复制原理" tabindex="-1">3.主从复制原理 <a class="header-anchor" href="#_3-主从复制原理" aria-label="Permalink to “3.主从复制原理”">​</a></h2><p>MySQL 数据库的主从复制主要是基于 Binary Log（二进制文件，简称 bin log）实现的，它的实现流程如下：</p><p><img src="`+e+'" alt=""></p><p>它的主要执行流程如下：</p><ol><li>主数据库接收到一个写操作（如 INSERT、UPDATE、DELETE）时，会将这个操作记录到二进制日志（Binary Log）中，将数据修改的操作按顺序记录下来。</li><li>从数据库 IO 线程会自动连接主服务，从二进制中读取同步数据，记录到中继日志（Relay Log）中。</li><li>从数据库的 SQL 线程会定期从中继日志中获取同步数据，写入到从数据库中。</li></ol><h2 id="_4-bin-log-日志格式" tabindex="-1">4.Bin Log 日志格式 <a class="header-anchor" href="#_4-bin-log-日志格式" aria-label="Permalink to “4.Bin Log 日志格式”">​</a></h2><p>Binary Log 二级制日志，它总共有以下三种格式（不同的日志格式决定了不同的主从同步效果）：</p><ol><li><p>STATEMENT 格式（语句模式，出现在 MySQL 5.1 之前）</p><p>：在这种格式下，binlog 记录的是执行的 SQL 语句的文本。</p><ol><li>优点：日志文件通常较小，复制效率较高。</li><li>缺点：在某些情况下，由于数据库环境的差异（如表结构、字符集等），在从服务器上重放这些 SQL 语句可能会导致不一致的结果。例如，获取当前时间的函数或存储过程等，可能会导致数据不一致。</li></ol></li><li><p>ROW 格式（行模式，诞生于 MySQL 5.1）</p><p>：在这种格式下，binlog 记录的是每一行数据更改的具体内容。</p><ol><li>优点：能够精确地记录数据的变化，避免了 STATEMENT 格式中的环境依赖问题，提供了更强的一致性保证。</li><li>缺点：日志文件可能会比 STATEMENT 格式大，因为记录了每一行的详细变化。此外，ROW 格式的日志在进行大量数据更新时可能会导致更高的 I/O 开销。</li></ol></li><li><p>MIXED 格式（混合模式）</p><p>：在这种格式下，binlog 可以根据具体的 SQL 语句和操作自动选择使用 STATEMENT 或 ROW 格式。</p><ol><li>优点：结合了 STATEMENT 和 ROW 格式的优点，能够在保证一致性的同时尽可能地优化日志大小和复制性能。</li><li>缺点：由于混合使用了两种格式，可能需要更复杂的管理和监控。在某些特定情况下，MIXED 格式可能无法达到最优的性能或一致性。</li></ol></li></ol><h2 id="_5-主从复制模式" tabindex="-1">5.主从复制模式 <a class="header-anchor" href="#_5-主从复制模式" aria-label="Permalink to “5.主从复制模式”">​</a></h2><p>MySQL 中主要有以下两种主从复制的模式，分别是异步复制和半同步复制。</p><ol><li><p>异步复制</p><p>：MySQL 主从复制中最常见和默认的模式。在异步复制模式中，主服务器将数据修改操作记录到二进制日志（Binary Log）中，并将日志传输给从服务器。从服务器接收到二进制日志后，会异步地应用这些日志进行数据复制。</p><ol><li>优点：它的优点是及时响应给使用者，主服务器不会受到从服务器的影响而等待确认，可以提高主服务器的性能。</li><li>缺点：由于是异步复制，可能存在数据传输的延迟，且从服务器上的复制过程是不可靠的。如果主服务器故障，尚未应用到从服务器的数据可能会丢失。</li></ol></li><li><p>半同步复制</p><p>：半同步复制是 MySQL 主从复制中的一种增强模式。在半同步复制模式中，主服务器将数据修改操作记录到二进制日志，并等待至少一个从服务器确认已接收到并应用了这些日志后才继续执行后续操作。</p><ol><li>优点：可以提供更高的数据一致性和可靠性，确保至少一个从服务器与主服务器保持同步。如果主服务器故障，已经确认接收并应用到从服务器的数据不会丢失。</li><li>缺点：由于半同步复制需要等待从服务器的确认，因此相对于异步复制，会增加一定的延迟，可能会影响主服务器的性能。</li></ol></li></ol><p>如果对数据一致性和可靠性要求较高，可以考虑使用半同步复制；如果对延迟和主服务器性能要求较高，可以继续使用异步复制，根据实际需求调整复制模式。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to “小结”">​</a></h2><p>MySQL 主从复制用于多个数据库服务器之间的数据同步，它可以提供高可用性、提高数据库整体性能和吞吐量，以及可以进行数据备份和数据库恢复。MySQL 主从复制是通过 bin log 实现的，主服务写入操作会同时添加到 bin log 中，而从数据库定期拉取主数据库的 bin log，然后将拉取的数据存放到自己的 relay log 中，之后再由单独 SQL 线程将数据写入到从数据库中，此时 MySQL 的主从同步就完成了。</p>',43)])])}const y=s(n,[["render",t]]);export{g as __pageData,y as default};
