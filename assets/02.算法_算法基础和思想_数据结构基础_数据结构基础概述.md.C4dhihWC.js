import{_ as l,c as o,o as t,ah as a}from"./chunks/framework.DVT8N-ZV.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"02.算法/算法基础和思想/数据结构基础/数据结构基础概述.md","filePath":"02.算法/算法基础和思想/数据结构基础/数据结构基础概述.md","lastUpdated":null}'),c={name:"02.算法/算法基础和思想/数据结构基础/数据结构基础概述.md"};function _(r,e,i,d,p,n){return t(),o("div",null,[...e[0]||(e[0]=[a('<h2 id="知识体系" tabindex="-1">知识体系 <a class="header-anchor" href="#知识体系" aria-label="Permalink to “知识体系”">​</a></h2><p><em>学习思路</em></p><blockquote><p>避免孤立的学习知识点，要关联学习。比如实际应用当中，我们经常使用的是<code>查找</code>和<code>排序</code>操作，这在我们的各种管理系统、数据库系统、操作系统等当中，十分常用，我们通过这个线索将知识点串联起来：</p></blockquote><p><code>数组</code> 的下标寻址十分迅速，但计算机的内存是有限的，故数组的长度也是有限的，实际应用当中数据往往十分庞大；而且无序数组查找最坏情况需要遍历整个数组；后来提出二分查找，二分查找要求数组的构造一定有序，二分查找解决了普通数组查找复杂度过高的问题。任何一种数组都无法解决插入、删除比较复杂的问题，因此，在一个增删改比较频繁的数组结构中，数组不会被优先考虑。</p><p><code>普通链表</code> 由于它的结构特点被证明不适合查找。</p><blockquote><p>A.数据结构 知识点：数据结构是基础中的基础，任何进阶都逃不开这些知识点</p></blockquote><blockquote><p>B.数据结构之 线性结构：首先理解数据结构中线性结构及其延申：数组和矩阵、链表、栈和队列等。</p></blockquote><ul><li><a href="./线性表-数组和矩阵.html">线性表-数组和矩阵</a><ul><li>数组是一种连续存储线性结构，元素类型相同，大小相等，数组是多维的，通过使用整型索引值来访问他们的元素，数组尺寸不能改变</li></ul></li><li><a href="./线性表-链表.html">线性表-链表</a><ul><li>n个节点离散分配，彼此通过指针相连，每个节点只有一个前驱节点，每个节点只有一个后续节点，首节点没有前驱节点，尾节点没有后续节点。确定一个链表我们只需要头指针，通过头指针就可以把整个链表都能推出来。</li></ul></li><li></li></ul>',8)])])}const m=l(c,[["render",_]]);export{u as __pageData,m as default};
